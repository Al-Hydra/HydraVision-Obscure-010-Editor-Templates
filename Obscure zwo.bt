//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: *.zwo
//   Authors: HydraBladeZ
//   Version: 1.0
//   Purpose: Parse .zwo files for Obscure 1 and 2
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
#include "zwoEntity.bt"
#include "zwoEntity3D.bt"
#include "zwoCamera.bt"
#include "zwoMaterial.bt"
#include "zwoMesh.bt"
#include "zwoLight.bt"
#include "zwoCameraAnm.bt"
#include "zwoAnimation.bt"
#include "zwoSkeletalAnim.bt"
#include "zwoNode.bt"

BigEndian();
local int Type = ReadInt();
while (!FEof())
{
    uint DataType <hidden = true>;
    
    switch(DataType)
    {
        case 2:
            struct zwoCamera Camera;
        break;

        case 3:
            struct zwoMaterial Material;
        break;
        
        case 4:
            Printf("End of file\n");
        break;

        case 5:
            struct zwoMesh Model ;
        break;
        
        case 6:
            struct SKL Skeleton;// <read = this.SkeletonName>; 
        break;
        
        case 7:
            struct zwoSkeletalAnim SkeletalAnimation;// <read = this.SkeletonName>; 
        break;

        case 9:
            struct zwoCameraAnim CameraAnim;
        break;

        case 0xa:
            struct zwoNode Node;
        break;
        
        case 0xd:
            struct zwoLight Light <read = "Light">;
        break;

        case 0xe:
            struct zwoAnimation RigidAnimation <read = "RigidAnimation">;
        break;

        case 0xf:
            struct zwoLight Light <read = "Light2">;
        break;
        
        default:
            struct{
            uint DataSize;
            byte Data[DataSize-4];
            }Unknown <read = GetChunkType(DataType)>;
        break;
    }

}


typedef struct{
    struct zwoEntity Entity;
    struct zwoEntity3D Entity3D;
    
    uint unk1;
    uint BoneCount;
    uint unk2;
    
    local int b;
    struct{
        for (b=0; b<BoneCount; b++)
            {
            struct ReadBone Bone;
            }
    }Bones;
}SKL;


typedef struct{
    float X;
    float Y;
    float Z;
}Vector;

typedef struct{
    float X;
    float Y;
    float Z;
    float W;
}Quaternion;

typedef struct{
    float Row1[4];
    float Row2[4];
    float Row3[4];
    float Row4[4];
}Matrix4x4;

typedef struct{
    uint StringLength;
    char String[StringLength];
}ReadString <read = String>;


typedef struct{
    uint unk;
    struct ReadString Name;
    uint ChildCount;
    
    int ChildBones[ChildCount];
            
    struct Matrix4x4 BoneMatrix;
}ReadBone <read = Name.String>;

//Functions
string GetChunkType(uint & value)
{
    switch(value)
    {
        case 2:
            return "Camera";
        break;

        case 3:
            return "Material";
        break;

        case 4:
            return "EOF";
        break;

        case 5:
            return "Mesh";
        break;
        
        case 6:
            return "Skeleton";
        break;
        
        case 7:
            return "Skeletal Animation";
        break;

        case 9:
            return "Camera Animation";
        break;

        case 0xe:
            return "Rigid Animation";
        break;
        
        default:
            return "Unknown";
        break;
    }
}